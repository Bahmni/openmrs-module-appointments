<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

    <changeSet id="create-appointment_speciality_table-201707031130" author="Shruthi,Pushpa">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="appointment_speciality" />
            </not>
        </preConditions>

        <sql>
            CREATE  TABLE IF NOT EXISTS appointment_speciality (
            speciality_id INT NOT NULL AUTO_INCREMENT ,
            name VARCHAR(50) NOT NULL ,
            date_created DATETIME NOT NULL ,
            creator INT NOT NULL ,
            date_changed DATETIME NULL ,
            changed_by INT NULL ,
            uuid  VARCHAR(38) NOT NULL UNIQUE,
            voided TINYINT NULL ,
            PRIMARY KEY (speciality_id) ,
            UNIQUE INDEX name_UNIQUE (name ASC) )

        </sql>
    </changeSet>

    <changeSet id="create-appointment_service_table-201707031130" author="Shruthi,Pushpa">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="appointment_service" />
            </not>
        </preConditions>

        <sql>
            CREATE  TABLE IF NOT EXISTS appointment_service (
            appointment_service_id INT NOT NULL AUTO_INCREMENT ,
            name VARCHAR(50) NOT NULL ,
            description TEXT NULL,
            start_time TIME NULL ,
            end_time TIME NULL ,
            location_id INT NULL ,
            speciality_id INT NULL ,
            max_appointments_limit INT NULL ,
            duration_mins INT NULL ,
            date_created DATETIME NOT NULL ,
            creator INT NOT NULL ,
            date_changed DATETIME NULL ,
            changed_by INT NULL ,
            voided TINYINT NULL ,
            voided_by INT,
            date_voided DATETIME,
            void_reason VARCHAR(255),
            uuid  VARCHAR(38) NOT NULL UNIQUE,
            PRIMARY KEY (appointment_service_id) ,
            INDEX fk_appointment_service_speciality_idx (speciality_id ASC) ,
            INDEX fk_appointment_service_location_idx (location_id ASC) ,
            UNIQUE INDEX name_UNIQUE (name ASC) ,
            CONSTRAINT fk_appointment_service_speciality
            FOREIGN KEY (speciality_id )
            REFERENCES appointment_speciality (speciality_id )
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
            CONSTRAINT fk_appointment_service_location
            FOREIGN KEY (location_id )
            REFERENCES location (location_id ))
        </sql>
    </changeSet>

    <changeSet id="appointments_-201707031031" author="Shruthi P">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*) FROM location_tag where name='Appointment Location';
            </sqlCheck>
        </preConditions>
        <comment>Add Appointment Location Tag if not already added.</comment>
        <sql>

            INSERT INTO location_tag (name, description, creator, date_created, uuid) VALUES
            ('Appointment Location',
            'When a user user creates a appointment service and chooses a location, they may only choose one with this tag',
            1,
            now(),
            uuid());
        </sql>
    </changeSet>

    <changeSet id="create-weekly_service_availability_table-201707071130" author="Shruthi,Pushpa">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="appointment_service_weekly_availability" />
            </not>
        </preConditions>

        <sql>
            CREATE  TABLE IF NOT EXISTS appointment_service_weekly_availability (
            service_weekly_availability_id INT NOT NULL AUTO_INCREMENT ,
            service_id INT NOT NULL ,
            day_of_week VARCHAR(45) NOT NULL ,
            start_time TIME NULL ,
            end_time TIME NULL ,
            max_appointments_limit INT NULL ,
            uuid  VARCHAR(38) NOT NULL UNIQUE,
            voided TINYINT NULL ,
            voided_by INT,
            date_voided DATETIME,
            void_reason VARCHAR(255),
            date_created DATETIME NOT NULL ,
            creator INT NOT NULL ,
            date_changed DATETIME NULL ,
            changed_by INT NULL ,
            PRIMARY KEY (service_weekly_availability_id) ,
            INDEX fk_weekly_availability_appointment_service_idx (service_id ASC) ,
            CONSTRAINT appointment_service FOREIGN KEY (service_id ) REFERENCES appointment_service (appointment_service_id) ,
            CONSTRAINT service_enterer FOREIGN KEY (creator) REFERENCES users (user_id),
            CONSTRAINT user_who_deleted_service FOREIGN KEY (voided_by) REFERENCES users (user_id));
        </sql>
    </changeSet>

    <changeSet id="create-appointment_service_type_table-201707191650" author="Santhosh, Pramida">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="appointment_service_type" />
            </not>
        </preConditions>
        <sql>
            CREATE TABLE IF NOT EXISTS appointment_service_type (
            appointment_service_type_id INT NOT NULL AUTO_INCREMENT ,
            appointment_service_id INT NOT NULL,
            name VARCHAR(50) NOT NULL ,
            duration_mins INT NULL ,
            date_created DATETIME NOT NULL ,
            creator INT NOT NULL ,
            date_changed DATETIME NULL ,
            changed_by INT NULL ,
            voided TINYINT NULL ,
            voided_by INT,
            date_voided DATETIME,
            void_reason VARCHAR(255),
            uuid  VARCHAR(38) NOT NULL UNIQUE,
            PRIMARY KEY (appointment_service_type_id) ,
            INDEX fk_appointment_service_idx (appointment_service_id ASC) ,
            UNIQUE INDEX service_name_dur_UNIQUE (appointment_service_id, name, duration_mins ASC) ,
            CONSTRAINT fk_appointment_service
            FOREIGN KEY (appointment_service_id )
            REFERENCES appointment_service (appointment_service_id ))
        </sql>
    </changeSet>
    <changeSet id="create-patient_appointment_table-201707211030" author="Deepak">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="patient_appointment" />
            </not>
        </preConditions>
        <sql>
            CREATE TABLE IF NOT EXISTS patient_appointment (
            patient_appointment_id      INT          NOT NULL AUTO_INCREMENT,
            provider_id                 INT          NULL,
            appointment_number          VARCHAR(50)  NOT NULL,
            patient_id                  INT          NOT NULL,
            start_date_time             DATETIME     NOT NULL,
            end_date_time               DATETIME     NOT NULL,
            appointment_service_id      INT          NULL,
            appointment_service_type_id INT          NULL,
            status                      VARCHAR(45)  NOT NULL
            COMMENT 'scheduled, checked in, started, completed, cancelled, missed',
            location_id                 INT          NULL,
            appointment_kind            VARCHAR(45)  NOT NULL
            COMMENT 'scheduled, walk in',
            comments                    VARCHAR(255) NULL,
            uuid                        VARCHAR(38)  NOT NULL UNIQUE,
            date_created                DATETIME     NOT NULL,
            creator                     INT          NOT NULL,
            date_changed                DATETIME     NULL,
            changed_by                  INT          NULL,
            voided                      TINYINT      NULL,
            voided_by                   INT,
            date_voided                 DATETIME,
            void_reason                 VARCHAR(255),
            PRIMARY KEY (`patient_appointment_id`),
            CONSTRAINT fk_patient_appointment_patient FOREIGN KEY (`patient_id`)
            REFERENCES patient (`patient_id`),
            CONSTRAINT fk_patient_appointment_location FOREIGN KEY (`location_id`)
            REFERENCES location (`location_id`),
            CONSTRAINT fk_patient_appointment_provider FOREIGN KEY (`provider_id`)
            REFERENCES provider (`provider_id`),
            CONSTRAINT fk_patient_appointment_appointment_service FOREIGN KEY (`appointment_service_id`)
            REFERENCES appointment_service (`appointment_service_id`),
            CONSTRAINT fk_patient_appointment_appointment_service_type FOREIGN KEY (`appointment_service_type_id`)
            REFERENCES appointment_service_type (`appointment_service_type_id`)
            )
        </sql>
    </changeSet>

    <changeSet id="drop_index_on_appointment_service_table-201707251710" author="Santhosh, Maharjun">
        <preConditions onFail="MARK_RAN">
            <tableExists tableName="appointment_service"/>
            <indexExists indexName="name_UNIQUE"/>
        </preConditions>
        <dropIndex tableName="appointment_service" indexName="name_UNIQUE"/>
    </changeSet>

    <changeSet id="add_color_column_to_appointment_service_table-201707251432" author="Santhosh, Maharjun">
        <preConditions onFail="MARK_RAN">
            <not>
                <columnExists columnName="color" tableName="appointment_service"/>
            </not>
        </preConditions>
        <sql>
            ALTER TABLE appointment_service
            ADD COLUMN color varchar(8) NULL AFTER duration_mins;
        </sql>
    </changeSet>

    <changeSet id="drop_index_on_appointment_service_type_table-201708031638" author="Santhosh, Pramida">
        <preConditions onFail="MARK_RAN">
            <tableExists tableName="appointment_service_type"/>
            <indexExists indexName="service_name_dur_UNIQUE"/>
        </preConditions>
        <dropIndex tableName="appointment_service_type" indexName="service_name_dur_UNIQUE"/>
    </changeSet>

    <changeSet id="create-patient_appointment_audit_table-201708311030" author="Shruthi">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="patient_appointment_audit" />
            </not>
        </preConditions>
        <sql>
            CREATE  TABLE IF NOT EXISTS patient_appointment_audit (
            patient_appointment_audit_id INT NOT NULL AUTO_INCREMENT,
            appointment_id INT NOT NULL,
            uuid VARCHAR(38) NOT NULL UNIQUE,
            date_created DATETIME NOT NULL,
            creator INT NOT NULL,
            date_changed DATETIME NULL,
            changed_by INT NULL,
            voided TINYINT NULL,
            voided_by INT,
            date_voided DATETIME,
            void_reason VARCHAR(255),
            status VARCHAR(45) NOT NULL,
            notes VARCHAR(1000),
            PRIMARY KEY (patient_appointment_audit_id) ,
            INDEX fk_patient_appointment_audit_patient_appointment_idx (appointment_id ASC) ,
            CONSTRAINT fk_patient_appointment_audit_patient_appointment
            FOREIGN KEY (appointment_id )
            REFERENCES patient_appointment (patient_appointment_id )
            )
        </sql>
    </changeSet>

    <changeSet id="create-appointment-status-change-task-20170912101533" author="Kaustav">
        <preConditions>
            <sqlCheck expectedResult="0">
                SELECT COUNT(*) FROM scheduler_task_config WHERE name = "Mark Appointment As Missed Or Complete Task";
            </sqlCheck>
        </preConditions>
        <sql>
            INSERT INTO
            scheduler_task_config(name, description, schedulable_class, start_time, start_time_pattern, repeat_interval,
            start_on_startup, created_by, date_created, uuid)
            VALUES
            ('Mark Appointment As Missed Task', 'Mark appointments as missed task', 'org.openmrs.module.appointments.scheduler.tasks.MarkAppointmentAsMissedTask',
            TIMESTAMP(CURDATE()), 'MM/dd/yyyy HH:mm:ss', 86400, TRUE, 1, NOW(), UUID());

            INSERT INTO
            scheduler_task_config(name, description, schedulable_class, start_time, start_time_pattern, repeat_interval,
            start_on_startup, created_by, date_created, uuid)
            VALUES
            ('Mark Appointment As Complete Task', 'Mark appointments as complete task', 'org.openmrs.module.appointments.scheduler.tasks.MarkAppointmentAsCompleteTask',
            TIMESTAMP(CURDATE()), 'MM/dd/yyyy HH:mm:ss', 86400, TRUE, 1, NOW(), UUID());
        </sql>
    </changeSet>

    <changeSet id="Create-privilege-view-appointments-201709201603"  author="Santhosh, Pramida">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(*) from privilege where privilege='View Appointments'</sqlCheck>
        </preConditions>
        <comment>Adding privilege for viewing Appointments</comment>
        <sql>
            INSERT INTO privilege (privilege, description, uuid) VALUES ('View Appointments', 'Able to view Appointments in Appointments module', uuid());
        </sql>
    </changeSet>

    <changeSet id="Create-privilege-manage-appointments-201709201605"  author="Santhosh, Pramida">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(*) from privilege where privilege='Manage Appointments'</sqlCheck>
        </preConditions>
        <comment>Adding privilege for managing Appointments</comment>
        <sql>
            INSERT INTO privilege (privilege, description, uuid) VALUES ('Manage Appointments', 'Able to manage Appointments in Appointments module', uuid());
        </sql>
    </changeSet>

    <changeSet id="Create-privilege-view-appointment-services-201709201606"  author="Santhosh, Pramida">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(*) from privilege where privilege='View Appointment Services'</sqlCheck>
        </preConditions>
        <comment>Adding privilege to view Services in Appointments module</comment>
        <sql>
            INSERT INTO privilege (privilege, description, uuid) VALUES ('View Appointment Services', 'Able to view Services in Appointments module', uuid());
        </sql>
    </changeSet>

    <changeSet id="Create-privilege-manage-appointment-services-201709201607"  author="Santhosh, Pramida">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(*) from privilege where privilege='Manage Appointment Services'</sqlCheck>
        </preConditions>
        <comment>Adding privilege to manage Services in Appointments module</comment>
        <sql>
            INSERT INTO privilege (privilege, description, uuid) VALUES ('Manage Appointment Services', 'Able to manage Services in Appointments module', uuid());
        </sql>
    </changeSet>
    
    <changeSet id="Create-privilege-manage-appointment-specialities-201709201608"  author="Bailly, Rurangirwa">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(*) from privilege where privilege='Manage Appointment Specialities'</sqlCheck>
        </preConditions>
        <comment>Adding privilege to manage Specialities in Appointments module</comment>
        <sql>
            INSERT INTO privilege (privilege, description, uuid) VALUES ('Manage Appointment Specialities', 'Able to manage Specialities in Appointments module', uuid());
        </sql>
    </changeSet>

    <changeSet id="global-property-past-appointments-sql" author="Maharjun, Shireesha">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(*) from global_property where property='bahmni.sqlGet.pastAppointments'</sqlCheck>
        </preConditions>
        <comment>Adding query to fetch past appointments for patient</comment>
        <sqlFile path="patientPastAppointments.sql"/>
    </changeSet>

    <changeSet id="global-property-upcoming-appointments-sql" author="Maharjun, Shireesha">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(*) from global_property where property='bahmni.sqlGet.upComingAppointments'</sqlCheck>
        </preConditions>
        <comment>Adding query to fetch upcoming appointments for patient</comment>
        <sqlFile path="patientUpcomingAppointments.sql"/>
    </changeSet>

    <changeSet id="Create-Available-for-appointments-201712121212-2" author="Maharjun, Saikumar">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM provider_attribute_type where name="Available for appointments";
            </sqlCheck>
        </preConditions>
        <comment>Adding provider attribute type for Appointments</comment>
        <sql>
            INSERT INTO provider_attribute_type (name, description, datatype, min_occurs, creator, date_created,
            retired, uuid)
            VALUES ("Available for appointments","providers will be available for appointments",
            "org.openmrs.customdatatype.datatype.BooleanDatatype", 0, 1, NOW(), 0, UUID());
        </sql>
    </changeSet>

    <changeSet id="201806261146" author="Suman">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*) FROM global_property where property = 'atomfeed.publish.eventsForAppointmentService';
            </sqlCheck>
        </preConditions>
        <comment>Adding global property to act as switch for raising appointment service events</comment>
        <insert tableName="global_property">
            <column name="property" value="atomfeed.publish.eventsForAppointmentService"/>
            <column name="property_value" value="true"/>
            <column name="uuid" valueComputed="UUID()"/>
            <column name="description" value="If set true, events related to appointment service changes are published"/>
        </insert>
    </changeSet>

    <changeSet id="201806261149" author="Suman">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*) FROM global_property where property = 'atomfeed.event.urlPatternForAppointmentService';
            </sqlCheck>
        </preConditions>
        <comment>Adding global property to specify the URL pattern for published appointment service events</comment>
        <insert tableName="global_property">
            <column name="property" value="atomfeed.event.urlPatternForAppointmentService"/>
            <column name="property_value" value="/openmrs/ws/rest/v1/appointment-services/{uuid}"/>
            <column name="uuid" valueComputed="UUID()"/>
            <column name="description" value="URL pattern to use for published appointment service events. Default is /openmrs/ws/rest/v1/appointment-services/{uuid}. If you change default value, please add your custom implementation for the given URL"/>
        </insert>
    </changeSet>

    <changeSet id="201806261612" author="Suman">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*) FROM global_property where property = 'atomfeed.publish.eventsForAppointments';
            </sqlCheck>
        </preConditions>
        <comment>Adding global property to act as switch for raising appointment events</comment>
        <insert tableName="global_property">
            <column name="property" value="atomfeed.publish.eventsForAppointments"/>
            <column name="property_value" value="true"/>
            <column name="uuid" valueComputed="UUID()"/>
            <column name="description" value="If set true, events related to appointment changes are published"/>
        </insert>
    </changeSet>

    <changeSet id="201806261614" author="Suman">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*) FROM global_property where property = 'atomfeed.event.urlPatternForAppointments';
            </sqlCheck>
        </preConditions>
        <comment>Adding global property to specify the URL pattern for published appointment events</comment>
        <insert tableName="global_property">
            <column name="property" value="atomfeed.event.urlPatternForAppointments"/>
            <column name="property_value" value="/openmrs/ws/rest/v1/appointments/{uuid}"/>
            <column name="uuid" valueComputed="UUID()"/>
            <column name="description" value="URL pattern to use for published appointment events. Default is /openmrs/ws/rest/v1/appointments/{uuid}. If you change default value, please add your custom implementation for the given URL"/>
        </insert>
    </changeSet>

    <changeSet id="patient_appointment_provider_table_201807251345" author="angshu">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="patient_appointment_provider" />
            </not>
        </preConditions>
        <sql>
            CREATE  TABLE IF NOT EXISTS patient_appointment_provider (
            patient_appointment_provider_id INT NOT NULL AUTO_INCREMENT,
            patient_appointment_id INT NOT NULL,
            provider_id int NOT NULL,
            response varchar(32) DEFAULT NULL,
            comments VARCHAR(1000),
            date_created DATETIME NOT NULL,
            creator INT NOT NULL,
            date_changed DATETIME NULL,
            changed_by INT NULL,
            voided TINYINT NULL,
            voided_by INT,
            date_voided DATETIME,
            void_reason VARCHAR(255),
            uuid VARCHAR(38)  NOT NULL UNIQUE,
            PRIMARY KEY (patient_appointment_provider_id) ,
            CONSTRAINT fk_patient_appointment_provider_patient_appointment FOREIGN KEY (patient_appointment_id) REFERENCES patient_appointment(patient_appointment_id),
            CONSTRAINT fk_patient_appointment_provider_provider FOREIGN KEY (provider_id) REFERENCES provider (provider_id)
            )
        </sql>
    </changeSet>

    <changeSet id="patient_appointment_provider_migration_201807281845" author="angshu">
        <comment>Migrating appointment provider to appointment_provider table</comment>
        <sql>
            insert into patient_appointment_provider (patient_appointment_id, provider_id, response, date_created, creator, uuid)
            select a.patient_appointment_id, a.provider_id, 'ACCEPTED', a.date_created, a.creator, uuid()
            from patient_appointment a where a.provider_id is not null;
        </sql>
    </changeSet>
    <changeSet id="201808241255" author="Saikumar, Neha">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*) FROM privilege WHERE privilege = 'Manage Own Appointments';
            </sqlCheck>
        </preConditions>
        <comment>Add Manage Own Appointments privilege to manage own appointments only.</comment>
        <insert tableName="privilege">
            <column name="privilege" value="Manage Own Appointments"/>
            <column name="description" value="With this privilege, providers can book/edit appointments only for themselves."/>
            <column name="uuid" valueComputed="UUID()"/>
        </insert>
    </changeSet>
    <changeSet id="201808241255" author="Saikumar, Sowmika">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*) FROM privilege WHERE privilege = 'Reset Appointment Status';
            </sqlCheck>
        </preConditions>
        <comment>Add Reset Appointment Status privilege to reset appointments from any status to scheduled.</comment>
        <insert tableName="privilege">
            <column name="privilege" value="Reset Appointment Status"/>
            <column name="description" value="With this privilege, users can reset appointments from any status to scheduled."/>
            <column name="uuid" valueComputed="UUID()"/>
        </insert>
    </changeSet>
    <changeSet id="201910091141" author="Dubey">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(*) from global_property where property='bahmni.appointments.runningOnOpenMRS'</sqlCheck>
        </preConditions>
        <comment>Adding 'bahmni.appointments.runningOnOpenMRS' global property to figure out instance type</comment>
        <insert tableName="global_property">
            <column name="property" value="bahmni.appointments.runningOnOpenMRS"/>
            <column name="uuid" valueComputed="UUID()"/>
            <column name="description" value="If set to yes, the appointments ui will run independent of bahmni core"/>
        </insert>
    </changeSet>
</databaseChangeLog>
